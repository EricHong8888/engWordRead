1、制作一个H5静态页面，页面顶部有一个横向导航（unit1 ~ unit6）；
2、在每个导航下展示着单词卡片；
3、单词卡片横向展示，通过滑动查看下一个单词卡片；
4、每一张单词卡片包含这些信息（单词,中文,拼音,切词,发音方式，拼读按钮），这些信息和按钮以纵向展示
5、卡片的内容从本地文件engword.csv中获取，以下是CSV文件内容格式：
    - 第一列：单词
    - 第二列：中文
    - 第三列：拼音
    - 第四列：切次
    - 第五列：发音方式
6、单词卡片的展示顺序与CVS文件的顺序一致；
7、单词卡片在页面中居中展示，卡片的大小为屏幕的70%，卡片左右两侧有留白，横向滑动需要留有下一张卡片的位置；
8、单词卡片点击拼读按钮，会播放当前单词的切词音频，同时切词处会显示对应的高亮。

============

当前实现功能：

1. 页面布局
- 顶部固定导航栏，显示 Unit 1-6，支持点击切换
- 导航栏适配 iPhone 安全区域
- 主体区域展示单词卡片，支持横向滑动
- 禁止页面上下滑动，只允许左右滑动查看卡片

2. 卡片设计
- 卡片宽度为屏幕的 60%，居中显示
- 右侧预留约 30px 显示下一张卡片的部分内容
- 卡片包含：单词、中文、拼音、切词、发音方式、拼读按钮
- 卡片底部显示当前序号（第 X 个 / 共 Y 个）
- 适配不同屏幕尺寸，保持合适的显示效果

3. 数据处理
- 从 engword.csv 文件读取单词数据
- 每个 Unit 显示 20 个单词
- 切换 Unit 时自动加载对应单元的单词
- 保持与 CSV 文件中的顺序一致

4. 交互功能
- 支持触摸滑动切换卡片
- 滑动时自动停止当前朗读
- 点击拼读按钮播放单词发音
- 拼读按钮状态切换：正常 -> 朗读中 -> 正常

5. 语音功能
- 使用 Web Speech API 实现语音合成
- 支持英语发音（优先使用英式或美式发音）
- 朗读完成后自动恢复按钮状态
- 切换卡片时自动停止当前朗读

6. 错误处理
- CSV 文件加载失败时显示错误提示
- 语音初始化失败时显示浏览器兼容性提示
- 确保语音功能和按钮状态的可靠性

7. 性能优化
- 使用 CSS transform 实现流畅的卡片切换动画
- 优化触摸事件处理，提供流畅的滑动体验
- 确保语音播放的响应速度

8. 样式设计
- 现代简洁的界面设计
- 合理的间距和留白
- 适当的阴影和圆角效果
- 清晰的视觉层次
- 良好的响应式支持

使用建议：
1. 推荐使用 Chrome 或 Edge 浏览器以获得最佳语音合成效果
2. 需要通过 Web 服务器访问（如 Python 的 http.server）
3. CSV 文件需要使用 UTF-8 编码
